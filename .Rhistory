g1a$icon="point"
g1a$dista<-g1a$V3<-NULL
g2a<-g2
g2a$icon="star"
g1a<-select(as.data.frame(g1a),V1,V2,icon,clase)
g2a<-select(g2a,V1,V2,icon,clase)
aguardar[[w]]<-rbind(g1a,g2a)
w=2
if(w!=1){
g2<-pointsmin %>%group_by(clase) %>% summarise(V1=mean(V1),V2=mean(V2))
}
g2$V3<-g2$clase
for (i in g2$V3){
g1[,i]<-(g1$V1-g2$V1[g2$V3==i])^2+(g1$V2-g2$V2[g2$V3==i])^2
}
qq<-q1 %in% g2$V3
pointsmin<-g1 %>% gather(clase,dista,one_of(q1[qq]%>%as.character())) %>%
group_by(V1,V2) %>% summarise(dista=min(dista))
g1
q1[qq]%>%as.character()
g1 %>% gather(clase,dista,one_of(q1[qq]%>%as.character()))
g1
g1 %>%select(V1,V2) %>%
gather(clase,dista,one_of(q1[qq]%>%as.character())) %>%
group_by(V1,V2) %>% summarise(dista=min(dista))
g1
g1 %>%select(V1,V2,one_of(q1[qq]))
g1 %>%select(V1,V2,one_of(q1[qq]%>%as.character()))
g1 %>%select(V1,V2,one_of(q1[qq]%>%as.character())) %>%
gather(clase,dista,one_of(q1[qq]%>%as.character()))
g1 %>%select(V1,V2,one_of(q1[qq]%>%as.character())) %>%
gather(clase,dista,one_of(q1[qq]%>%as.character())) %>%
group_by(V1,V2)
g1 %>%select(V1,V2,one_of(q1[qq]%>%as.character())) %>%
gather(clase,dista,one_of(q1[qq]%>%as.character())) %>%
group_by(V1,V2) %>% summarise(dista=min(dista))
pointsmin<-g1 %>%select(V1,V2,one_of(q1[qq]%>%as.character())) %>%
gather(clase,dista,one_of(q1[qq]%>%as.character())) %>%
group_by(V1,V2) %>% summarise(dista=min(dista))
g1<-g1 %>% gather(clase,dista,one_of(q1[qq]%>%as.character()))
g1$clase<-g1$dista<-NULL
g1<-g1 %>% gather(clase,dista,one_of(q1[qq]%>%as.character()))
pointsmin<-left_join(pointsmin,g1,by=c("V1","V2","dista"))
g1<-pointsmin
g1a<-g1
g1a$icon="point"
input=data.frame(numbergroups=3,numbercenters=3,iterationnum=4)
set.seed(1991)
g1<-map_df(.x = 1:input$numbergroups,generatePoints)
g1$V3<-as.factor(g1$V3)
g1$icon<-"point"
g2<-g1[sample(seq_along(g1$V1),input$numbercenters),]
g2$icon<-"star"
q1<-g2$clase<-g2$V3<-as.factor(1:input$numbercenters)
aguardar<-list()
for(w in 1:10){
if(w!=1){
g2<-pointsmin %>%group_by(clase) %>% summarise(V1=mean(V1),V2=mean(V2))
}
g2$V3<-g2$clase
for (i in g2$V3){
g1[,i]<-(g1$V1-g2$V1[g2$V3==i])^2+(g1$V2-g2$V2[g2$V3==i])^2
}
qq<-q1 %in% g2$V3
pointsmin<-g1 %>%select(V1,V2,one_of(q1[qq]%>%as.character())) %>%
gather(clase,dista,one_of(q1[qq]%>%as.character())) %>%
group_by(V1,V2) %>% summarise(dista=min(dista))
g1$clase<-g1$dista<-NULL
g1<-g1 %>% gather(clase,dista,one_of(q1[qq]%>%as.character()))
pointsmin<-left_join(pointsmin,g1,by=c("V1","V2","dista"))
g1<-pointsmin
g1a<-g1
g1a$icon="point"
g1a$dista<-g1a$V3<-NULL
g2a<-g2
g2a$icon="star"
g1a<-select(as.data.frame(g1a),V1,V2,icon,clase)
g2a<-select(g2a,V1,V2,icon,clase)
aguardar[[w]]<-rbind(g1a,g2a)
}
ggplot(aes(x=V1,y=V2,color=clase,shape=icon,size=icon),data=aguardar[[input$iterationnum]])+geom_point()
runApp('ShinyApp/k-means_visualization')
runApp('ShinyApp/k-means_visualization')
runApp('ShinyApp/k-means_visualization')
runApp('ShinyApp/k-means_visualization')
runApp('ShinyApp/k-means_visualization')
runApp('ShinyApp/k-means_visualization')
g1a<-g1
runApp('ShinyApp/k-means_visualization')
knitr::opts_chunk$set(echo = FALSE)
input=data.frame(numbergroups=3,numbercenters=3,iterationnum=4)
set.seed(1991)
g1<-map_df(.x = 1:input$numbergroups,generatePoints)
g1$V3<-as.factor(g1$V3)
g1$icon<-"point"
g2<-g1[sample(seq_along(g1$V1),input$numbercenters),]
g2$icon<-"star"
q1<-g2$clase<-g2$V3<-as.factor(1:input$numbercenters)
aguardar<-list()
for(w in 1:10){
if(w!=1){
g2<-pointsmin %>%group_by(clase) %>% summarise(V1=mean(V1),V2=mean(V2))
}
g2$V3<-g2$clase
for (i in g2$V3){
g1[,i]<-(g1$V1-g2$V1[g2$V3==i])^2+(g1$V2-g2$V2[g2$V3==i])^2
}
qq<-q1 %in% g2$V3
pointsmin<-g1 %>%select(V1,V2,one_of(q1[qq]%>%as.character())) %>%
gather(clase,dista,one_of(q1[qq]%>%as.character())) %>%
group_by(V1,V2) %>% summarise(dista=min(dista))
g1$clase<-g1$dista<-NULL
g1<-g1 %>% gather(clase,dista,one_of(q1[qq]%>%as.character()))
pointsmin<-left_join(pointsmin,g1,by=c("V1","V2","dista"))
g1<-pointsmin
g1a<-g1
g1a$icon="point"
g1a$dista<-g1a$V3<-NULL
g2a<-g2
g2a$icon="star"
g1a<-select(as.data.frame(g1a),V1,V2,icon,clase)
g2a<-select(g2a,V1,V2,icon,clase)
aguardar[[w]]<-rbind(g1a,g2a)
}
ggplot(aes(x=V1,y=V2,color=clase,shape=icon,size=icon),data=aguardar[[input$iterationnum]])+geom_point()
mygrafica<-map_df(1:3,generatePoints)
mygrafica
map_df(1:3,generatePoints) %>% ggplot(aes(x=V1,y=V2,color=as.factor(V3)))+geom_point()
library(foreach)
library(doParallel}
library(doParallel)
install.packages(doParallel)
install.packages("doParallel")
registerDoParallel(cores=2)
library(doParallel)
registerDoParallel(cores=2)
library(dplyr)
library(caret)
library(purrr)
library(tidyr)
library(doParallel)
rm(list=ls())
registerDoParallel(cores=3)
setwd("~/PracticalMLProject")
if(!file.exists("training.csv")){
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
"training.csv")
}
if(!file.exists("testing.csv")){
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",
"testing.csv")
}
training<-read.csv("training.csv",stringsAsFactors = FALSE,na.strings = c("","NA","<NA>","#DIV/0!"))
testing<-read.csv("testing.csv")
colsnum<-colnames(training)[sapply(training,class)=="numeric"]
nonmissings<-map_df(training,~sum(!is.na(.x)))
nonmissings<-gather(nonmissings,variable,valor)
difvalues<-map_df(training,~length(unique(.x)))
difvalues<-gather(difvalues,variable,valor)
to_remove<-difvalues$variable[difvalues$valor<3]
training<-training %>% dplyr::select(-one_of(to_remove))
incross<-createDataPartition(training$classe,p=0.3,list=FALSE)
crossv<-training[incross,]
training<-training[-incross,]
trainingpre=preProcess(training,c("center","scale","knnImpute"))
training2<-predict(trainingpre,training)
folds<- createFolds(y=training2$classe,k=5)
folds
train_control<-trainControl(method = "cv",number = 10)
library(dplyr)
library(caret)
library(purrr)
library(tidyr)
library(doParallel)
rm(list=ls())
registerDoParallel(cores=3)
setwd("~/PracticalMLProject")
if(!file.exists("training.csv")){
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
"training.csv")
}
if(!file.exists("testing.csv")){
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",
"testing.csv")
}
training<-read.csv("training.csv",stringsAsFactors = FALSE,na.strings = c("","NA","<NA>","#DIV/0!"))
testing<-read.csv("testing.csv")
colsnum<-colnames(training)[sapply(training,class)=="numeric"]
nonmissings<-map_df(training,~sum(!is.na(.x)))
nonmissings<-gather(nonmissings,variable,valor)
difvalues<-map_df(training,~length(unique(.x)))
difvalues<-gather(difvalues,variable,valor)
to_remove<-difvalues$variable[difvalues$valor<3]
training<-training %>% dplyr::select(-one_of(to_remove))
# incross<-createDataPartition(training$classe,p=0.3,list=FALSE)
# crossv<-training[incross,] training<-training[-incross,]
trainingpre=preProcess(training,c("center","scale","knnImpute"))
training2<-predict(trainingpre,training)
train_control<-trainControl(method = "cv",number = 10)
modelo1<-train(data=training2,method="lda",classe~.)
summary(modelo1)
modelo1$method
modelo1$modelInfo
modelo1$results
modelo1$pred
modelo1$bestTune
modelo1$metric
modelo1$control
modelo1$finalModel
modelo1<-train(data=training2,method="lda",classe~.,trControl=train_control)
modelo1$control
bb=modelo1$control
bb$method
bb$number
bb$repeats
bb$search
bb$p
bb$savePredictions
bb$allowParallel
modelo1$finalModel
modelo1
cor(training2)
training2$X<-NULL
bb<-cor(training2[.-c(1,4)])
bb<-cor(training2[,-c(1,4)])
bb<-cor(training2[,-c(1,4,149)])
View(bb)
cc<-bb[bb>0.9]
cc
cc<-bb>0.9
View(cc)
dd<-rowSums(cc)
dd
dd[dd>5]
cc[,4]
fff<-cor(training[,cc[,4]])
training[,cc[,4]
]
fff<-cor(training2[,cc[,4]])
training2[,cc[,4]]
bb<-cor(training2[,-c(1,4,149)][,cc[,4]])
rowSums(bb)
names(bb)
colnames(bb)
removecols<-c("roll_belt","total_accel_belt","max_roll_belt","max_picth_belt","min_roll_belt",
"min_pitch_belt","avg_yaw_belt","accel_belt_y")
training2<-training2 %>% select(-one_of(removecols))
training2<-training2 %>% dplyr::select(-one_of(removecols))
bb<-cor(training2[,-c(1,4,141)])
cc<-bb>0.9
dd<-rowSums(cc)
dd[dd>5]
library(dplyr)
library(caret)
library(purrr)
library(tidyr)
library(doParallel)
rm(list=ls())
registerDoParallel(cores=3)
setwd("~/PracticalMLProject")
if(!file.exists("training.csv")){
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
"training.csv")
}
if(!file.exists("testing.csv")){
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",
"testing.csv")
}
training<-read.csv("training.csv",stringsAsFactors = FALSE,na.strings = c("","NA","<NA>","#DIV/0!"))
testing<-read.csv("testing.csv")
colsnum<-colnames(training)[sapply(training,class)=="numeric"]
nonmissings<-map_df(training,~sum(!is.na(.x)))
nonmissings<-gather(nonmissings,variable,valor)
difvalues<-map_df(training,~length(unique(.x)))
difvalues<-gather(difvalues,variable,valor)
to_remove<-difvalues$variable[difvalues$valor<3]
training<-training %>% dplyr::select(-one_of(to_remove))
# incross<-createDataPartition(training$classe,p=0.3,list=FALSE)
# crossv<-training[incross,] training<-training[-incross,]
trainingpre=preProcess(training,c("center","scale","knnImpute"))
training2<-predict(trainingpre,training)
training2$X<-NULL
#the following variables [1] "roll_belt"        "total_accel_belt" "max_roll_belt"    "max_picth_belt"   "min_roll_belt"
#[6] "min_pitch_belt"   "avg_roll_belt"    "avg_yaw_belt"     "accel_belt_y"
# are highly correlated with one another will remove all but avg_roll_belt that seems to be the most correlated
# with the rest of variables
removecols<-c("roll_belt","total_accel_belt","max_roll_belt","max_picth_belt","min_roll_belt",
"min_pitch_belt","avg_yaw_belt","accel_belt_y")
training2<-training2 %>% dplyr::select(-one_of(removecols))
train_control<-trainControl(method = "cv",number = 10)
modelo1<-train(data=training2,method="lda",classe~.,trControl=train_control)
bb<-det(training2[,-c(1,4,141)])
bb<-det(training2[,-c(1,4,141)]%>% as.matrix)
bb<-qr.solve(training2[,-c(1,4,141)]%>% as.matrix)
ww<-list()
bb<-qr.solve(training2[,-c(1,4,141)[1]]%>% as.matrix)
bb<-qr.solve(training2[,-c(1,4,141)[1,]]%>% as.matrix)
bb<-qr.solve(training2[,-c(1,4,141)[,1]]%>% as.matrix)
bb<-qr.solve(training2[,-c(1,4,141)[,2]]%>% as.matrix)
bb<-qr.solve(training2[,-c(1,4,141)[,2]]%>% as.matrix)
bb<-qr.solve(training2[,-c(1,4,141)][,1]%>% as.matrix)
bb<-qr.solve(training2[,-c(1,4,141)] %>% as.matrix)
library(Matrix)
bb<-rankMatrix(training2[,-c(1,4,141)] %>% as.matrix)
bb<-rankMatrix(training2[,-c(1,4,141)][,1] %>% as.matrix)
bb=list()
for(i in 1:141){
bb[[i]]<-rankMatrix(training2[,-c(1,4,141)][,1:i] %>% as.matrix)
}
bb
bb[[1:20]]
bb[[1]]
bb[[10]]
bb[[20]]
bb[[19]]
bb[[15]]
bb[[11]]
bb[[10]]
training2[,-c(1,4,141)][,11]
training2[,-c(1,4,141)] %>% colnames()
removecols<-c("roll_belt","total_accel_belt","max_roll_belt","max_picth_belt","min_roll_belt",
"min_pitch_belt","avg_yaw_belt","accel_belt_y","min_yaw_belt")
library(dplyr)
library(caret)
library(purrr)
library(tidyr)
library(doParallel)
rm(list=ls())
registerDoParallel(cores=3)
setwd("~/PracticalMLProject")
if(!file.exists("training.csv")){
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
"training.csv")
}
if(!file.exists("testing.csv")){
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",
"testing.csv")
}
training<-read.csv("training.csv",stringsAsFactors = FALSE,na.strings = c("","NA","<NA>","#DIV/0!"))
testing<-read.csv("testing.csv")
colsnum<-colnames(training)[sapply(training,class)=="numeric"]
nonmissings<-map_df(training,~sum(!is.na(.x)))
nonmissings<-gather(nonmissings,variable,valor)
difvalues<-map_df(training,~length(unique(.x)))
difvalues<-gather(difvalues,variable,valor)
to_remove<-difvalues$variable[difvalues$valor<3]
training<-training %>% dplyr::select(-one_of(to_remove))
# incross<-createDataPartition(training$classe,p=0.3,list=FALSE)
# crossv<-training[incross,] training<-training[-incross,]
trainingpre=preProcess(training,c("center","scale","knnImpute"))
training2<-predict(trainingpre,training)
training2$X<-NULL
#the following variables [1] "roll_belt"        "total_accel_belt" "max_roll_belt"    "max_picth_belt"   "min_roll_belt"
#[6] "min_pitch_belt"   "avg_roll_belt"    "avg_yaw_belt"     "accel_belt_y"
# are highly correlated with one another will remove all but avg_roll_belt that seems to be the most correlated
# with the rest of variables, others are detected as full colineality
removecols<-c("roll_belt","total_accel_belt","max_roll_belt","max_picth_belt","min_roll_belt",
"min_pitch_belt","avg_yaw_belt","accel_belt_y","min_yaw_belt")
dim(training2)[2])
dim(training2)[2]
bb<-rankMatrix(training2[,-c(1,4,141)] %>% as.matrix)
View(training2)
sum(is.na(training2))
sum(is.infinite(training2))
sum(training2>100000)
sum(training2>10000000)
sum(training2>1000000000000)
training2[training2>1000000000000]
training2$X<-NULL
removecols<-c("roll_belt","total_accel_belt","max_roll_belt","max_picth_belt","min_roll_belt",
"min_pitch_belt","avg_yaw_belt","accel_belt_y","min_yaw_belt")
training2<-training2 %>% dplyr::select(-one_of(removecols))
bb<-rankMatrix(training2[,-c(1,4,140)] %>% as.matrix)
bb=list()
cc=c(as-logical(0*1:140))
for(i in 1:141){
bb[[i]]<-rankMatrix(training2[,-c(1,4,dim(training2)[2])][,1:i] %>% as.matrix)
if(i=1){
next()
}
cc[i]<-bb[[i]]==bb[[i-1]]
}
bb=list()
cc=c(as-logical(0*1:140))
cc=c(as.logical(0*1:140))
for(i in 1:141){
bb[[i]]<-rankMatrix(training2[,-c(1,4,dim(training2)[2])][,1:i] %>% as.matrix)
if(i=1){
next()
}
cc[i]<-bb[[i]]==bb[[i-1]]
}
bb[[i]]<-rankMatrix(training2[,-c(1,4,dim(training2)[2])][,1:i] %>% as.matrix)
i=1
bb[[i]]<-rankMatrix(training2[,-c(1,4,dim(training2)[2])][,1:i] %>% as.matrix)
if(i=1){
next()
}
for(i in 1:141){
bb[[i]]<-rankMatrix(training2[,-c(1,4,dim(training2)[2])][,1:i] %>% as.matrix)
if(i==1){
next()
}
cc[i]<-bb[[i]]==bb[[i-1]]
}
bb[[cc]]
bb[cc]
training2[,-c(1,4,dim(training2)[2])] %>% colnames()
training2<-training2 %>% dplyr::select(-one_of(removecols))
training2<-predict(trainingpre,training)
training2$X<-NULL
removecols<-c("roll_belt","total_accel_belt","max_roll_belt","max_picth_belt","min_roll_belt",
"min_pitch_belt","avg_yaw_belt","accel_belt_y","min_yaw_belt","amplitude_pitch_arm" ,
"min_roll_dumbbell","max_yaw_forearm")
training2<-training2 %>% dplyr::select(-one_of(removecols))
bb[[i]]<-rankMatrix(training2[,-c(1,4,dim(training2)[2])][,1:137] %>% as.matrix)
bb[[i]]<-rankMatrix(training2[,-c(1,4,dim(training2)[2])][,1:134] %>% as.matrix)
bb<-rankMatrix(training2[,-c(1,4,dim(training2)[2])][,1:134] %>% as.matrix)
bb<-rankMatrix(training2[,-c(1,4,dim(training2)[2])][,1:100] %>% as.matrix)
bb<-rankMatrix(training2[,-c(1,4,dim(training2)[2])][,1:50] %>% as.matrix)
bb<-rankMatrix(training2[,-c(1,4,dim(training2)[2])][,1:75] %>% as.matrix)
bb<-rankMatrix(training2[,-c(1,4,dim(training2)[2])][,1:60] %>% as.matrix)
bb<-rankMatrix(training2[,-c(1,4,dim(training2)[2])][,1:70] %>% as.matrix)
bb<-rankMatrix(training2[,-c(1,4,dim(training2)[2])][,1:65] %>% as.matrix)
bb<-rankMatrix(training2[,-c(1,4,dim(training2)[2])][,1:68] %>% as.matrix)
bb<-rankMatrix(training2[,-c(1,4,dim(training2)[2])][,1:67] %>% as.matrix)
bb<-rankMatrix(training2[,-c(1,4,dim(training2)[2])][,1:66] %>% as.matrix)
bb<-rankMatrix(training2[,-c(1,4,dim(training2)[2])][,1:65] %>% as.matrix)
bb<-rankMatrix(training2[,-c(1,4,dim(training2)[2])][,1:80] %>% as.matrix)
bb<-rankMatrix(training2[,-c(1,4,dim(training2)[2])][,1:76] %>% as.matrix)
bb<-rankMatrix(training2[,-c(1,4,dim(training2)[2])][,1:78] %>% as.matrix)
bb<-rankMatrix(training2[,-c(1,4,dim(training2)[2])][,1:77] %>% as.matrix)
bb<-rankMatrix(training2[,-c(1,4,dim(training2)[2])][,1:76] %>% as.matrix)
bb<-colnames(training2[,-c(1,4,dim(training2)[2])] %>% as.matrix)
colnames(training2[,-c(1,4,dim(training2)[2])] %>% as.matrix)
training2<-predict(trainingpre,training)
training2$X<-NULL
#the following variables [1] "roll_belt"        "total_accel_belt" "max_roll_belt"    "max_picth_belt"   "min_roll_belt"
#[6] "min_pitch_belt"   "avg_roll_belt"    "avg_yaw_belt"     "accel_belt_y"
# are highly correlated with one another will remove all but avg_roll_belt that seems to be the most correlated
# with the rest of variables, others are detected as full colineality
removecols<-c("roll_belt","total_accel_belt","max_roll_belt","max_picth_belt","min_roll_belt",
"min_pitch_belt","avg_yaw_belt","accel_belt_y","min_yaw_belt","amplitude_pitch_arm" ,
"min_roll_dumbbell","max_yaw_forearm","amplitude_yaw_arm","min_yaw_dumbbell")
training2<-training2 %>% dplyr::select(-one_of(removecols))
bb<-rankMatrix(training2[,-c(1,4,dim(training2)[2])] %>% as.matrix)
train_control<-trainControl(method = "cv",number = 10)
modelo1<-train(data=training2,method="lda",classe~.,trControl=train_control)
modelo1<-train(data=training2,method="lda",classe~.-1,trControl=train_control)
modelo1
training2<-predict(trainingpre,training)
training2$X<-NULL
#the following variables [1] "roll_belt"        "total_accel_belt" "max_roll_belt"    "max_picth_belt"   "min_roll_belt"
#[6] "min_pitch_belt"   "avg_roll_belt"    "avg_yaw_belt"     "accel_belt_y"
# are highly correlated with one another will remove all but avg_roll_belt that seems to be the most correlated
# with the rest of variables, others are detected as full colineality
removecols<-c("min_yaw_belt","amplitude_pitch_arm" ,
"min_roll_dumbbell","max_yaw_forearm","amplitude_yaw_arm","min_yaw_dumbbell")
training2<-training2 %>% dplyr::select(-one_of(removecols))
train_control<-trainControl(method = "cv",number = 10)
modelo1<-train(data=training2,method="lda",classe~.-1,trControl=train_control)
modelo1
preditct(modelo1,testing)
predict(modelo1,testing)
predict(modelo1,testing[,colnames(testing)%in% colnames(training2)])
testing[,colnames(testing)%in% colnames(training2)]
predict(trainingpre,testing)
data1<-predict(trainingpre,testing)
predict(modelo1,data1[,colnames(data1)%in% colnames(training2)])
final<-predict(modelo1,data1[,colnames(data1)%in% colnames(training2)])
library(dplyr)
library(caret)
library(purrr)
library(tidyr)
library(doParallel)
rm(list=ls())
registerDoParallel(cores=3)
setwd("~/PracticalMLProject")
if(!file.exists("training.csv")){
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
"training.csv")
}
if(!file.exists("testing.csv")){
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",
"testing.csv")
}
training<-read.csv("training.csv",stringsAsFactors = FALSE,na.strings = c("","NA","<NA>","#DIV/0!"))
testing<-read.csv("testing.csv")
colsnum<-colnames(training)[sapply(training,class)=="numeric"]
nonmissings<-map_df(training,~sum(!is.na(.x)))
nonmissings<-gather(nonmissings,variable,valor)
difvalues<-map_df(training,~length(unique(.x)))
difvalues<-gather(difvalues,variable,valor)
to_remove<-difvalues$variable[difvalues$valor<3]
training<-training %>% dplyr::select(-one_of(to_remove))
# incross<-createDataPartition(training$classe,p=0.3,list=FALSE)
# crossv<-training[incross,] training<-training[-incross,]
trainingpre=preProcess(training,c("center","scale","knnImpute"))
training2<-predict(trainingpre,training)
training2$X<-NULL
#the following variables [1] "roll_belt"        "total_accel_belt" "max_roll_belt"    "max_picth_belt"   "min_roll_belt"
#[6] "min_pitch_belt"   "avg_roll_belt"    "avg_yaw_belt"     "accel_belt_y"
# are highly correlated with one another will remove all but avg_roll_belt that seems to be the most correlated
# with the rest of variables, others are detected as full colineality
removecols<-c("min_yaw_belt","amplitude_pitch_arm" ,
"min_roll_dumbbell","max_yaw_forearm","amplitude_yaw_arm","min_yaw_dumbbell")
training2<-training2 %>% dplyr::select(-one_of(removecols))
train_control<-trainControl(method = "cv",number = 10)
modelo1<-train(data=training2,method="lda",classe~.-1,trControl=train_control)
data1<-predict(trainingpre,testing)
final<-predict(modelo1,data1[,colnames(data1)%in% colnames(training2)])
save.image("~/PracticalMLProject/Workspace with final model.RData")
